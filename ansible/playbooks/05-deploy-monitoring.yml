---
- name: Deploy monitoring stack
  hosts: localhost
  connection: local
  become: no
  tasks:
    - name: Check if Helm is installed
      command: helm version
      register: helm_version
      ignore_errors: yes

    - name: Install Helm if not present
      shell: |
        # Detect OS and architecture
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m)
        if [ "$ARCH" = "x86_64" ]; then
          ARCH="amd64"
        elif [ "$ARCH" = "arm64" ] || [ "$ARCH" = "aarch64" ]; then
          ARCH="arm64"
        fi
        
        # Download and install Helm
        curl -Lo helm.tar.gz "https://get.helm.sh/helm-v3.12.0-${OS}-${ARCH}.tar.gz"
        tar -zxvf helm.tar.gz
        sudo mv ${OS}-${ARCH}/helm /usr/local/bin/helm
        chmod +x /usr/local/bin/helm
        rm -rf helm.tar.gz ${OS}-${ARCH}
      when: helm_version.rc != 0

    - name: Add Prometheus Helm repository
      shell: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      ignore_errors: yes

    - name: Update Helm repositories
      shell: helm repo update

    - name: Create monitoring namespace
      shell: kubectl create namespace {{ prometheus_namespace }}

    - name: Deploy Prometheus
      shell: |
        helm install monitoring prometheus-community/kube-prometheus-stack \
          --namespace {{ prometheus_namespace }} \
          --create-namespace \
          --set prometheus.prometheusSpec.nodeSelector.node-role=infra \
          --set prometheus.prometheusSpec.tolerations[0].key=node-role \
          --set prometheus.prometheusSpec.tolerations[0].operator=Equal \
          --set prometheus.prometheusSpec.tolerations[0].value=infra \
          --set prometheus.prometheusSpec.tolerations[0].effect=NoSchedule \
          --set kube-state-metrics.nodeSelector.node-role=infra \
          --set kube-state-metrics.tolerations[0].key=node-role \
          --set kube-state-metrics.tolerations[0].operator=Equal \
          --set kube-state-metrics.tolerations[0].value=infra \
          --set kube-state-metrics.tolerations[0].effect=NoSchedule

    - name: Wait for Prometheus to be ready
      shell: kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus -n {{ prometheus_namespace }} --timeout=300s

    - name: Create Grafana service for external access
      shell: |
        kubectl expose service monitoring-grafana \
          --type=NodePort \
          --port=3000 \
          --target-port=3000 \
          --name=grafana-external \
          --namespace={{ prometheus_namespace }}

    - name: Display monitoring status
      debug:
        msg: "Monitoring stack deployed successfully!"